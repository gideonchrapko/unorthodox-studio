/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { useSpring } from '@react-spring/core';
import { a } from '@react-spring/three';

export default function Model({ ...props }) {
  const ref = useRef();
  const ref1 = useRef();
  // const ref2 = useRef();
  // const ref3 = useRef();
  // const ref4 = useRef();
  // const ref5 = useRef();
  const group = useRef();
  const { nodes, materials } = useGLTF('/Logo.glb');
  const [hover, setHover] = useState(false)

  useFrame((state) => {
    const t = state.clock.getElapsedTime()

    ref.current.position.y = (1 - Math.sin(t / 0.6)) / 30
    ref1.current.position.y = (1 - Math.sin(t / 0.6)) / 8
    // ref2.current.position.y = (1 + Math.sin(t / 0.6)) / 10
    // ref2.current.position.y = (1 + Math.sin(t / 0.6)) / 20
    // ref3.current.position.y = (1 - Math.sin(t / 0.6)) / 30
    // ref4.current.position.y = (1 + Math.sin(t / 0.6)) / 20
    // ref5.current.position.y = (1 - Math.sin(t / 0.6)) / 10
  })

  const material = new THREE.MeshPhysicalMaterial({
    color: new THREE.Color('#bb86a1').convertSRGBToLinear(),
    roughness: 0,
    clearcoat: 1,
    clearcoatRoughness: 0,
  })

  const animatedProps = useSpring({
    hovered: hover ? 30 : 25.45,
    position: hover ? [-0.2, 0, 0.96] : [0, 0, 0.96]
  });

  return (
    <group ref={group} {...props} dispose={null} position={[-0.5, -0.7, 0]} scale={0.5} rotation={[0, -0.5, 0]}>
        <mesh
          ref={ref}
          geometry={nodes.Curve.geometry} 
          // material={material} 
          // position={animatedProps.position}
          position={[0, 0, 0.96]}
          rotation={[Math.PI / 2, 0, 0]} 
          // scale={animatedProps.hovered}
          scale={25.45}
          onPointerOver={() => setHover(true)}
          onPointerOut={() => setHover(false)}
          receiveShadow
          castShadow
        >
          <meshStandardMaterial 
          opacity={1} 
          attach="material" 
          color="green" 
          roughness={0}   
          metalness={0.1} />
        </mesh>
        
        <a.mesh 
          ref={ref1}
          geometry={nodes.Curve001.geometry} 
          // material={material} 
          // material={materials.SVGMat} 
          position={[0, 0, 0.96]} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={25.45}
          receiveShadow 
          castShadow 
        >
          <meshStandardMaterial attach="material" color="lightblue" roughness={0} metalness={0.1} transparent={false} />
        </a.mesh>
        <a.mesh 
          // ref={ref2}
          geometry={nodes.Curve002.geometry} 
          // material={materials.SVGMat} 
          position={[0, 0, 0.96]} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={25.45}
          receiveShadow 
        >
      <meshStandardMaterial attach="material" color="lightblue" roughness={0} metalness={0.1} transparent={false} />
        </a.mesh>
        <a.mesh
          // ref={ref3}
          geometry={nodes.Curve003.geometry} 
          // material={materials.SVGMat} 
          position={[0, 0, 0.96]} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={25.45}
          receiveShadow 
          >
      <meshStandardMaterial attach="material" color="lightblue" roughness={0} metalness={0.1} />
        </a.mesh>
        <a.mesh 
          // ref={ref4}
          geometry={nodes.Curve004.geometry} 
          // material={materials.SVGMat} 
          position={[0, 0, 0.96]} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={25.45}
          receiveShadow 
          >
      <meshStandardMaterial attach="material" color="lightblue" roughness={0} metalness={0.1} />
        </a.mesh>
        <a.mesh
          // ref={ref5}
          geometry={nodes.Curve005.geometry} 
          // material={materials.SVGMat} 
          position={[0, 0, 0.96]} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={25.45}
          receiveShadow 
          >
      <meshStandardMaterial attach="material" color="lightblue" roughness={0} metalness={0.1} />
        </a.mesh>
    </group>
  )
}

useGLTF.preload('/Logo.glb')
